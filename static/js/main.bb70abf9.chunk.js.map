{"version":3,"sources":["components/StructureViz.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StructureViz","props","useState","style","setStyle","clickedIdx","setClickedIdx","clickedResidue","setClickedResidue","structureId","useRef","viewer","setViewer","useEffect","_viewer","$3Dmol","current","backgroundColor","alert","a","setClickable","atom","_","__","resi","resn","zoomTo","sphere","radius","render","downloadAndViewPdb","cartoon","color","arrows","pdb","id","width","height","position","value","type","onClick","SequenceViz","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0OAWaA,EAAe,SAACC,GAA4B,IAAD,EAC5BC,mBAAS,WADmB,mBAC/CC,EAD+C,KACxCC,EADwC,OAElBF,mBAAS,QAFS,mBAE/CG,EAF+C,KAEnCC,EAFmC,OAGVJ,mBAAS,QAHC,mBAG/CK,EAH+C,KAG/BC,EAH+B,KAIhDC,EAAcC,iBAAO,eAJ2B,EAM1BR,mBAAwB,MANE,mBAM/CS,EAN+C,KAMvCC,EANuC,KAQtDC,qBACE,WACE,IACMC,EAAUC,eACdN,EAAYO,QAFC,CAAEC,gBAAiB,YAKnB,MAAXH,EACFF,EAAUE,GAEVI,MAAM,iCAGV,CAACT,IAGHI,qBAAU,YACgB,uCAAG,sBAAAM,EAAA,yDACX,MAAVR,EADqB,gCAEjBI,WAAgB,WAAYJ,EAAQ,IAFnB,OAGvBA,EAAOS,aACL,IACA,GACA,SAACC,EAAWV,EAAaW,EAAQC,GAC/BjB,EAAce,EAAKG,MACnBhB,EAAkBa,EAAKI,MACvBd,EAAOe,OACL,CAAEF,KAAM,CAACH,EAAKG,KAAO,EAAGH,EAAKG,KAAMH,EAAKG,KAAO,IAC/C,QAINb,EAAOP,SAAS,GAAI,CAAEuB,OAAQ,CAAEC,OAAQ,KACxCjB,EAAOkB,SAhBgB,2CAAH,qDAmBxBC,KACC,CAACnB,IAsBJ,OAfAE,qBACE,WACiB,OAAXF,IACY,YAAVR,GACFQ,EAAOP,SAAS,GAAI,CAAEuB,OAAQ,CAAEC,OAAQ,KACxCjB,EAAOkB,UACY,WAAV1B,IACTQ,EAAOP,SAAS,GAAI,CAAE2B,QAAS,CAAEC,MAAO,WAAYC,QAAQ,KAC5DtB,EAAOkB,aAIb,CAAClB,EAAQR,IAIT,gCACE,2CACA,4BAAIF,EAAMiC,MACV,qBACEC,GAAI1B,EAAYO,QAChBb,MAAO,CACLiC,MAAO,IACPC,OAAQ,IACRC,SAAU,cAGd,iDAAoBjC,KACpB,mDAAsBE,KACtB,uBACEgC,MAAM,wBACNC,KAAK,SACLC,QAAS,WAnCbrC,EADuB,YAAVD,EAAsB,SAAW,kBCvD5CuC,EAAc,WAClB,OACE,8BACE,6CAiBSC,EAZH,WACV,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8CACA,cAAC,EAAD,CAAcV,IAAK,SACnB,cAAC,EAAD,UCJOW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bb70abf9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport $ from \"jquery\";\n// @ts-ignore\nimport * as $3Dmol from \"3dmol/build/3Dmol-nojquery.js\";\n\ninterface Viewer {\n  setStyle: (sel: any, style: any) => void;\n  setClickable: (sel: any, clickable: boolean, callback: Function) => void;\n  render: () => void;\n}\n\nexport const StructureViz = (props: { pdb: string }) => {\n  const [style, setStyle] = useState(\"surface\");\n  const [clickedIdx, setClickedIdx] = useState(\"None\");\n  const [clickedResidue, setClickedResidue] = useState(\"None\");\n  const structureId = useRef(\"structureId\");\n\n  const [viewer, setViewer] = useState<Viewer | null>(null);\n\n  useEffect(\n    function initializeViewer() {\n      const config = { backgroundColor: \"#282c34\" };\n      const _viewer = $3Dmol.createViewer(\n        structureId.current,\n        config\n      ) as Viewer;\n      if (_viewer != null) {\n        setViewer(_viewer);\n      } else {\n        alert(\"Failed to initialize viewer\");\n      }\n    },\n    [structureId]\n  );\n\n  useEffect(() => {\n    const downloadAndViewPdb = async () => {\n      if (viewer != null) {\n        await $3Dmol.download(\"pdb:1pu0\", viewer, {});\n        viewer.setClickable(\n          {},\n          true,\n          (atom: any, viewer: any, _: any, __: any) => {\n            setClickedIdx(atom.resi);\n            setClickedResidue(atom.resn);\n            viewer.zoomTo(\n              { resi: [atom.resi - 5, atom.resi, atom.resi + 5] },\n              1000\n            );\n          }\n        );\n        viewer.setStyle({}, { sphere: { radius: 3 } });\n        viewer.render();\n      }\n    };\n    downloadAndViewPdb();\n  }, [viewer]);\n\n  const toggleSurfaceRibbon = () => {\n    const next = style === \"surface\" ? \"ribbon\" : \"surface\";\n    setStyle(next);\n  };\n\n  useEffect(\n    function updateViewer() {\n      if (viewer !== null) {\n        if (style === \"surface\") {\n          viewer.setStyle({}, { sphere: { radius: 3 } });\n          viewer.render();\n        } else if (style === \"ribbon\") {\n          viewer.setStyle({}, { cartoon: { color: \"spectrum\", arrows: true } });\n          viewer.render();\n        }\n      }\n    },\n    [viewer, style]\n  );\n\n  return (\n    <div>\n      <h1>STRUCTURE</h1>\n      <p>{props.pdb}</p>\n      <div\n        id={structureId.current}\n        style={{\n          width: 500,\n          height: 400,\n          position: \"relative\",\n        }}\n      />\n      <p> Clicked index: {clickedIdx}</p>\n      <p> Clicked residue: {clickedResidue}</p>\n      <input\n        value=\"toggle surface/ribbon\"\n        type=\"button\"\n        onClick={() => toggleSurfaceRibbon()}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { StructureViz } from \"./components/StructureViz\";\n\nconst SequenceViz = () => {\n  return (\n    <div>\n      <h1>Sequence</h1>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Fel d 1 Viz</h1>\n        <StructureViz pdb={\"1PUO\"} />\n        <SequenceViz />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}